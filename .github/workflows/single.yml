name: ObjC Metrics (Single)

on:
  pull_request:
    branches: [ '**' ]
    types: [opened, synchronize]

  workflow_dispatch:

jobs:
  collect:
    name: PR Report
    runs-on: ubuntu-latest

    outputs:
      nsobject_count_base: ${{ steps.metrics.outputs.nsobject_count_base }}
      nsobject_count_pr: ${{ steps.metrics.outputs.nsobject_count_pr }}
      nsobjectcompat_count_base: ${{ steps.metrics.outputs.nsobjectcompat_count_base }}
      nsobjectcompat_count_pr: ${{ steps.metrics.outputs.nsobjectcompat_count_pr }}
      objc_count_base: ${{ steps.metrics.outputs.objc_count_base }}
      objc_count_pr: ${{ steps.metrics.outputs.objc_count_pr }}
      objcmembers_count_base: ${{ steps.metrics.outputs.objcmembers_count_base }}
      objcmembers_count_pr: ${{ steps.metrics.outputs.objcmembers_count_pr }}

    steps:
      - name: Checkout - Base
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref}}
          fetch-depth: 1
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            **/*.swift
            /objc-metrics.sh

      - name: Measure - Base
        id: measure_base
        run: |
          source objc-metrics.sh --export none
          echo "nsobject_count=$NSOBJECT_COUNT" >> "$GITHUB_OUTPUT"
          echo "nsobjectcompat_count=$NSOBJECTCOMPAT_COUNT" >> "$GITHUB_OUTPUT"
          echo "objc_count=$OBJC_COUNT" >> "$GITHUB_OUTPUT"
          echo "objcmembers_count=$OBJCMEMBERS_COUNT" >> "$GITHUB_OUTPUT"

      - name: Checkout - Head
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 1
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            **/*.swift
            /objc-metrics.sh

      - name: Measure - Head
        id: measure_head
        run: |
          source objc-metrics.sh --export none
          echo "nsobject_count=$NSOBJECT_COUNT" >> "$GITHUB_OUTPUT"
          echo "nsobjectcompat_count=$NSOBJECTCOMPAT_COUNT" >> "$GITHUB_OUTPUT"
          echo "objc_count=$OBJC_COUNT" >> "$GITHUB_OUTPUT"
          echo "objcmembers_count=$OBJCMEMBERS_COUNT" >> "$GITHUB_OUTPUT"

      - name: Prepare Report
        id: prepare_report
        env:
          NSOBJECT_COUNT_BASE: ${{ steps.measure_base.outputs.nsobject_count }}
          NSOBJECTCOMPAT_COUNT_BASE: ${{ steps.measure_base.outputs.nsobjectcompat_count }}
          OBJC_COUNT_BASE: ${{ steps.measure_base.outputs.objc_count }}
          OBJCMEMBERS_COUNT_BASE: ${{ steps.measure_base.outputs.objcmembers_count }}
          NSOBJECT_COUNT_HEAD: ${{ steps.measure_head.outputs.nsobject_count }}
          NSOBJECTCOMPAT_COUNT_HEAD: ${{ steps.measure_head.outputs.nsobjectcompat_count }}
          OBJC_COUNT_HEAD: ${{ steps.measure_head.outputs.objc_count }}
          OBJCMEMBERS_COUNT_HEAD: ${{ steps.measure_head.outputs.objcmembers_count }}
        run: |
          TOTAL_COUNT_BASE=$(($NSOBJECT_COUNT_BASE+$NSOBJECTCOMPAT_COUNT_BASE+$OBJC_COUNT_BASE+$OBJCMEMBERS_COUNT_BASE))
          TOTAL_COUNT_HEAD=$(($NSOBJECT_COUNT_HEAD+$NSOBJECTCOMPAT_COUNT_HEAD+$OBJC_COUNT_HEAD+$OBJCMEMBERS_COUNT_HEAD))
          
          NSOBJECT_COUNT_DIFF=$(($NSOBJECT_COUNT_HEAD-$NSOBJECT_COUNT_BASE))
          NSOBJECTCOMPAT_COUNT_DIFF=$(($NSOBJECTCOMPAT_COUNT_HEAD-$NSOBJECTCOMPAT_COUNT_BASE))
          OBJC_COUNT_DIFF=$(($OBJC_COUNT_HEAD-$OBJC_COUNT_BASE))
          OBJCMEMBERS_COUNT_DIFF=$(($OBJCMEMBERS_COUNT_HEAD-$OBJCMEMBERS_COUNT_BASE))
          TOTAL_COUNT_DIFF=$(($TOTAL_COUNT_HEAD-$TOTAL_COUNT_BASE))
          
          printf "%s\n" "               |  Base  |  Head  |  Change  |"
          printf "%s\n" "---------------|--------|--------|----------|"
          printf "@objc          | %6d | %6d | %8d |\n" $OBJC_COUNT_BASE $OBJC_COUNT_HEAD $OBJC_COUNT_DIFF
          printf "@objcMembers   | %6d | %6d | %8d |\n" $OBJCMEMBERS_COUNT_BASE $OBJCMEMBERS_COUNT_HEAD $OBJCMEMBERS_COUNT_DIFF
          printf "NSObjectCompat | %6d | %6d | %8d |\n" $NSOBJECTCOMPAT_COUNT_BASE $NSOBJECTCOMPAT_COUNT_HEAD $NSOBJECTCOMPAT_COUNT_DIFF
          printf "NSObject       | %6d | %6d | %8d |\n" $NSOBJECT_COUNT_BASE $NSOBJECT_COUNT_HEAD $NSOBJECT_COUNT_DIFF
          printf "%s\n" "---------------|--------|--------|----------|"
          printf "Total          | %6d | %6d | %8d |\n" $TOTAL_COUNT_BASE $TOTAL_COUNT_HEAD $TOTAL_COUNT_DIFF
          
          echo "nsobject_count_diff=$NSOBJECT_COUNT_DIFF" >> "$GITHUB_OUTPUT"
          echo "nsobjectcompat_count_diff=$NSOBJECTCOMPAT_COUNT_DIFF" >> "$GITHUB_OUTPUT"
          echo "objc_count_diff=$OBJC_COUNT_DIFF" >> "$GITHUB_OUTPUT"
          echo "objcmembers_count_diff=$OBJCMEMBERS_COUNT_DIFF" >> "$GITHUB_OUTPUT"
          echo "total_count_base=$TOTAL_COUNT_BASE" >> "$GITHUB_OUTPUT"
          echo "total_count_head=$TOTAL_COUNT_HEAD" >> "$GITHUB_OUTPUT"
          echo "total_count_diff=$TOTAL_COUNT_DIFF" >> "$GITHUB_OUTPUT"

      - name: Post Comment
        uses: actions/github-script@v6
        if: steps.prepare_report.outputs.objc_count_diff != 0 || steps.prepare_report.outputs.objcmembers_count_diff != 0 || steps.prepare_report.outputs.nsobjectcompat_count_diff != 0 || steps.prepare_report.outputs.nsobject_count_diff != 0
        with:
          script: |
            const comments = github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            })
            comments.then((value) => {
              const objcCountBase = ${{ steps.measure_base.outputs.objc_count }}
              const objcCountHead = ${{ steps.measure_head.outputs.objc_count }}
              const objcCountDiff = ${{ steps.prepare_report.outputs.objc_count_diff }}

              const objcMembersCountBase = ${{ steps.measure_base.outputs.objcmembers_count }}
              const objcMembersCountHead = ${{ steps.measure_head.outputs.objcmembers_count }}
              const objcMembersCountDiff = ${{ steps.prepare_report.outputs.objcmembers_count_diff }}

              const nsObjectCompatCountBase = ${{ steps.measure_base.outputs.nsobjectcompat_count }}
              const nsObjectCompatCountHead = ${{ steps.measure_head.outputs.nsobjectcompat_count }}
              const nsObjectCompatCountDiff = ${{ steps.prepare_report.outputs.nsobjectcompat_count_diff }}

              const nsObjectCountBase = ${{ steps.measure_base.outputs.nsobject_count }}
              const nsObjectCountHead = ${{ steps.measure_head.outputs.nsobject_count }}
              const nsObjectCountDiff = ${{ steps.prepare_report.outputs.nsobject_count_diff }}

              const totalCountBase = ${{ steps.prepare_report.outputs.total_count_base }}
              const totalCountHead = ${{ steps.prepare_report.outputs.total_count_head }}
              const totalCountDiff = ${{ steps.prepare_report.outputs.total_count_diff }}
              
              const refLink = "[${{ github.base_ref}}](${{github.server_url}}/${{ github.repository }}/tree/${{ github.base_ref}})"
              const prLink = "#${{ github.event.pull_request.number }}"
              
              let conclusion
              let conclusionMarker
              if (totalCountDiff > 0) {
                conclusion = "increase"
                conclusionMarker = "ðŸ˜¢"
              }
              else if (totalCountDiff < 0) {
                conclusion = "decrease"
                conclusionMarker = "ðŸ¥³"
              }
              else {
                conclusion = "not change"
                conclusionMarker = "âœ”ï¸Ž"
              }
              
              const reportBody = `## ObjC Usage Report ðŸ“Š
              ${conclusionMarker} Merging ${prLink} int ${refLink} will **${conclusion}** ObjC usage
              || ${refLink} | ${prLink} | Change |
              | --- | --: | --: | --: |
              | \`@objc\` | ${objcCountBase} | ${objcCountHead} | ${objcCountDiff} |
              | \`@objcMembers\` | ${objcMembersCountBase} | ${objcMembersCountHead} | ${objcMembersCountDiff} |
              | \`NSObjectCompat\` | ${nsObjectCompatCountBase} | ${nsObjectCompatCountHead} | ${nsObjectCompatCountDiff} |
              | \`NSObject\` | ${nsObjectCountBase} | ${nsObjectCountHead} | ${nsObjectCountDiff} |
              | **Total** | **${totalCountBase}** | **${totalCountHead}** | **${totalCountDiff}** |
              `
              const myComment = value.data.find((comment) => {
                return comment.user.login == "github-actions[bot]" && comment.user.type == "Bot" && comment.body.startsWith("## ObjC Usage Report ðŸ“Š")
              })
              if (myComment === undefined) {
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: reportBody
                })
              }
              else {
                github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: myComment.id,
                  body: reportBody
                })
              }
            })
